diff --git a/node_modules/ldflex/module/AbstractPathResolver.js b/node_modules/ldflex/module/AbstractPathResolver.js
index 1c77bfb..7b700a6 100644
--- a/node_modules/ldflex/module/AbstractPathResolver.js
+++ b/node_modules/ldflex/module/AbstractPathResolver.js
@@ -60,6 +60,7 @@ export default class AbstractPathResolver {
       return contextRaw[property] && contextRaw[property]['@reverse'];
     }));
     const resultsCache = this.getResultsCache(pathData, predicate, reverse);
+
     const newData = {
       property,
       predicate,
@@ -105,6 +106,7 @@ export default class AbstractPathResolver {
     let {
       propertyCache
     } = pathData;
+
     return propertyCache && lazyThenable(async () => {
       // Preloading does not work with reversed predicates
       propertyCache = !(await reverse) && (await propertyCache);
diff --git a/node_modules/ldflex/module/ExecuteQueryHandler.js b/node_modules/ldflex/module/ExecuteQueryHandler.js
index f1870b8..9901ac7 100644
--- a/node_modules/ldflex/module/ExecuteQueryHandler.js
+++ b/node_modules/ldflex/module/ExecuteQueryHandler.js
@@ -23,6 +23,7 @@ export default class ExecuteQueryHandler {
     } = pathData.settings;
     if (!queryEngine) throw new Error(`${pathData} has no queryEngine setting`);
     const query = await path.sparql;
+    console.log(query)
     if (query === null || query === undefined) throw new Error(`${pathData} has no sparql property`); // No results if the query is empty
 
     if (query.length === 0) return; // Extract the term from every query result
diff --git a/node_modules/ldflex/module/PreloadHandler.js b/node_modules/ldflex/module/PreloadHandler.js
index 48065d6..7d0c863 100644
--- a/node_modules/ldflex/module/PreloadHandler.js
+++ b/node_modules/ldflex/module/PreloadHandler.js
@@ -47,6 +47,7 @@ export default class PreloadHandler {
       vars,
       resultVar
     } = await this.createQuery(predicates, path);
+    console.log(query)
     const {
       settings: {
         queryEngine
@@ -59,7 +60,7 @@ export default class PreloadHandler {
 
     for await (const binding of bindings) {
       // Initialize the result's cache if needed
-      const result = binding.get(resultVar),
+      const result = binding.get(resultVar.substring(1)),
             hash = hashTerm(result);
 
       if (!(hash in resultsCache)) {
@@ -80,7 +81,7 @@ export default class PreloadHandler {
       const propertyCache = propertyCaches[hash];
 
       for (let i = 0; i < vars.length; i++) {
-        const value = binding.get(vars[i]);
+        const value = binding.get(vars[i].substring(1));
 
         if (value) {
           const valuePath = pathData.extendPath({
